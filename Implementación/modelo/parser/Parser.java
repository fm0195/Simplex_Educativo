
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package modelo.parser;

import java.io.FileReader;
import java.io.StringReader;
import java_cup.runtime.*;
import modelo.parser.Scanner;
import modelo.parser.IParser;
import modelo.AbstractFraccion;
import modelo.DtoSimplex;
import modelo.Fraccion;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser implements IParser{

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\006\000\002\006\005\000" +
    "\002\006\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\005\000\002\007\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\006\015\007\016\004\001\002\000\004\014" +
    "\045\001\002\000\004\002\044\001\002\000\004\013\027" +
    "\001\002\000\004\014\010\001\002\000\004\011\011\001" +
    "\002\000\010\005\013\006\014\014\015\001\002\000\016" +
    "\004\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\001" +
    "\002\000\006\006\024\014\025\001\002\000\004\014\023" +
    "\001\002\000\016\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\001\002\000\010\004\020\005\021\013\uffff" +
    "\001\002\000\010\005\013\006\014\014\015\001\002\000" +
    "\010\005\ufff0\006\ufff0\014\ufff0\001\002\000\010\005\uffef" +
    "\006\uffef\014\uffef\001\002\000\016\004\ufff9\005\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\013\ufff9\001\002\000\016\004\ufff7" +
    "\005\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\001\002\000" +
    "\004\014\026\001\002\000\016\004\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\013\ufff4\001\002\000\016\004\ufff5\005" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\001\002\000\010" +
    "\005\013\006\014\014\015\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffc\013\042\001\002\000\014\004\020" +
    "\005\021\007\033\010\034\011\035\001\002\000\006\005" +
    "\ufff3\006\ufff3\001\002\000\006\005\ufff2\006\ufff2\001\002" +
    "\000\006\005\ufff1\006\ufff1\001\002\000\006\005\037\006" +
    "\040\001\002\000\004\006\041\001\002\000\006\002\ufffb" +
    "\013\ufffb\001\002\000\006\002\ufffa\013\ufffa\001\002\000" +
    "\010\005\013\006\014\014\015\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\000\001\002\000\004\011\046\001" +
    "\002\000\010\005\013\006\014\014\015\001\002\000\010" +
    "\004\020\005\021\013\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\015\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\016\001\001\000\004\007\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\027\005\030\006\031\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\035\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\042\005\030" +
    "\006\031\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\046\007\011\001\001" +
    "\000\004\012\016\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 this.s = (Scanner) super.getScanner(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

        Symbol next = s.next_token();
        if(next.sym == sym.NUMRESTRICCION)
            return scan();
        return next;  
    }


    private Scanner s;
    private Parser(Scanner s){ super(s); this.s=s; }
    private TreeSet<String> conjuntoVariables = new TreeSet<>();
    private HashMap<String, AbstractFraccion> hashFracciones = new HashMap<>();
    private ArrayList<HashMap<String, AbstractFraccion>> listaRestricciones = new ArrayList<>();
    private ArrayList<Integer> listaDesigualdades = new ArrayList<>();
    private boolean esMaximizacion = true;
    @Override
    public DtoSimplex parse(String value) {
        try {
            java_cup.runtime.Scanner s = new modelo.parser.Scanner(new StringReader(value));
            Parser p = new Parser(s);
            Symbol res = p.parse();
            DtoSimplex dto = (DtoSimplex) res.value;
            return dto;
        } catch(Exception e) {
            throw new IllegalArgumentException("Error en el formato de entrada");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // problemaSimplex ::= funcionObjetivo CAMBIOLINEA restricciones 
            {
              Object RESULT =null;
		 
                    int cantRestricciones = listaRestricciones.size();
                    int cantVariables = conjuntoVariables.size() + 1;
                    AbstractFraccion[][] matriz = new Fraccion[cantRestricciones][cantVariables];
                    HashMap<String, AbstractFraccion> hashRestriccion = listaRestricciones.get(0);
                    int i = 0;
                    for (Iterator<String> iterator = conjuntoVariables.iterator(); i < cantVariables; i++) {
                        String variable;
                        try {
                            variable = iterator.next();
                        } catch (NoSuchElementException e) {
                            variable = null;
                        }
                        for (int j = 0; j < cantRestricciones ; j++) {
                            hashRestriccion = listaRestricciones.get(j);

                            if(hashRestriccion.containsKey(variable))
                              matriz[j][i] = hashRestriccion.get(variable);
                            else
                              matriz[j][i] = new Fraccion();
                        }
                    }
                    int[] desigualdades = new int[cantRestricciones-1];
                    for (i = 0; i < desigualdades.length; i++) {
                        desigualdades[i] = listaDesigualdades.get(i);
                    }
                    String[] listaVariables = conjuntoVariables.toArray(new String[conjuntoVariables.size()]);
                    RESULT = new DtoSimplex(matriz, listaVariables, desigualdades);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("problemaSimplex",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= problemaSimplex EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funcionObjetivo ::= MAX VARIABLE IGUAL declaracionVariables 
            {
              Object RESULT =null;
		 
                        listaRestricciones.add(hashFracciones);
                        hashFracciones = new HashMap<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionObjetivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcionObjetivo ::= MIN VARIABLE IGUAL declaracionVariables 
            {
              Object RESULT =null;
		 
                        listaRestricciones.add(hashFracciones);
                        hashFracciones = new HashMap<>();
                        esMaximizacion = false;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionObjetivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // restricciones ::= restriccion CAMBIOLINEA restricciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("restricciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // restricciones ::= restriccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("restricciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // restriccion ::= declaracionVariables desigualdad COEFICIENTE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int coefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object coef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        listaDesigualdades.add((int) d);
                        AbstractFraccion coeficiente = (AbstractFraccion) coef;
                        hashFracciones.put(null, coeficiente);
                        listaRestricciones.add(hashFracciones);
                        hashFracciones = new HashMap<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // restriccion ::= declaracionVariables desigualdad MENOS COEFICIENTE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object coef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        listaDesigualdades.add((int) d);
                        AbstractFraccion coeficiente = (AbstractFraccion) coef;
                        coeficiente.hacerNegativa();
                        hashFracciones.put(null, coeficiente);
                        listaRestricciones.add(hashFracciones);
                        hashFracciones = new HashMap<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("restriccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionVariables ::= declaracionVariables operador declaracionVariable 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            int operador = (int) op;
                            String variable = (String) var;
                            if(operador == sym.MENOS){
                                AbstractFraccion fraccion = hashFracciones.get(variable);
                                fraccion.hacerNegativa();
                                hashFracciones.put(variable, fraccion);
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVariable ::= COEFICIENTE VARIABLE 
            {
              Object RESULT =null;
		int coefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object coef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  AbstractFraccion fraccion = (AbstractFraccion) coef;
                        String variable = (String) var;
                        conjuntoVariables.add(variable);
                        hashFracciones.put(variable, fraccion); 
                        RESULT = variable;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionVariable ::= VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String variable = (String) var;
                        conjuntoVariables.add(variable);
                        hashFracciones.put(variable, new Fraccion(1, 1));
                        RESULT = variable;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionVariable ::= MENOS COEFICIENTE VARIABLE 
            {
              Object RESULT =null;
		int coefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object coef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  AbstractFraccion fraccion = (AbstractFraccion) coef;
                        fraccion.hacerNegativa();
                        String variable = (String) var;
                        conjuntoVariables.add(variable);
                        hashFracciones.put(variable, fraccion); 
                        RESULT = variable;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariable ::= MENOS VARIABLE 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  String variable = (String) var;
                        conjuntoVariables.add(variable);
                        hashFracciones.put(variable, new Fraccion(-1, 1));
                        RESULT = variable;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // desigualdad ::= MAYORIGUAL 
            {
              Object RESULT =null;
		 RESULT = sym.MAYORIGUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desigualdad",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // desigualdad ::= MENORIGUAL 
            {
              Object RESULT =null;
		 RESULT = sym.MENORIGUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desigualdad",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // desigualdad ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT = sym.IGUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desigualdad",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operador ::= MAS 
            {
              Object RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sym.MAS; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operador ::= MENOS 
            {
              Object RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sym.MENOS;; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
